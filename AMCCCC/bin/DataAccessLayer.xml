<?xml version="1.0"?>
<doc>
<assembly>
<name>
DataAccessLayer
</name>
</assembly>
<members>
<member name="M:DataAccessLayer.DAL.DataUtil.CreateDataTable``1">
	<summary>
 Convert an IList&lt;T&gt; into a DataTable schema
 </summary>
</member><member name="M:DataAccessLayer.DAL.DataUtil.ConvertToDataTable``1(System.Collections.Generic.IList{``0})">
	<summary>
 Convert an IList into a DataTable
 </summary>
	<example><code>
 IList Person people = new List&lt;Person&gt;
    {
        new Person { Id= 1, DoB = DateTime.Now, Name = "Bob", Sex = Person.Sexes.Male }
    };
 DataTable dt = DataUtil.ConvertToDataTable(people);
 </code></example>
</member><member name="M:DataAccessLayer.DAL.DataUtil.ConvertToList``1(System.Data.DataTable)">
	<summary>
 Convert DataTable to IList&lt;T&gt;. Some column names should match property names- or you'll have a list of empty T entities.
 </summary>
	<example><code>
 IList&lt;Person&gt; people = new List&lt;Person&gt;
    {
        new Person { Id= 1, DoB = DateTime.Now, Name = "Bob", Sex = Person.Sexes.Male }
    };
 DataTable dt = DataUtil.ConvertToDataTable(people);
 IList&lt;Person&gt; people2 = DataUtil.ConvertToList&lt;Person&gt;(dt); //round trip
 //Note that people2 is a list of cloned Person objects
 </code></example>
</member><member name="M:DataAccessLayer.DAL.DataUtil.ConvertDataRowToEntity``1(System.Data.DataRow)">
	<summary>
 Convert a single DataRow into an object of type T.
 </summary>
</member><member name="P:DataAccessLayer.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:DataAccessLayer.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:DataAccessLayer.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
</members>
</doc>